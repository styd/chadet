#!/usr/bin/env ruby

require 'optparse' # to parse the command options
require 'set' # to check character redundancy
require 'chadet'

class String
  # define methods for coloring text
  colors = {:red => 31, :green => 32, :yellow => 33, :blue => 34, :cyan => 36, :code => 7}
  colors.each do |k, v|
    if k == :code
      define_method(k) {return "\e[#{v}m #{self} \e[0m"}
    else
      define_method(k) {return "\e[#{v}m#{self}\e[0m"}
    end
  end

  def flash seconds = 2
    info = " " + self
    print info
    sleep seconds
    print "\r" + " "*info.gsub(/\e\[\d*m(.*)\e\[0m/, '\1').length
    print "\r"
  end

  def blink num_of_times = 4
    info = " " + self
    print "\n"
    x = num_of_times
    x.times do
      print info.gsub(/[\w!?\.\'\(\)˚\-｡ｰ\;\/\"\:<>+,★·.·´¯`░]/, " ")
      sleep 0.18*x/4
      print (info.lines.length == 1 ? "\r" : "\r\e[#{info.lines.count-1}A")
      print info.yellow
      sleep 0.1
      print (info.lines.length == 1 ? "\r" : "\r\e[#{info.lines.count-1}A")
      x -= 0.2
    end
    puts info.yellow
  end

  def flash seconds = 2
    info = " " + self
    print info
    sleep seconds
    print "\r" + " "*info.gsub(/\e\[\d*m(.*)\e\[0m/, '\1').length
    print "\r"
  end

  def blink num_of_times = 5
    info = " " + self
    print "\n"
    x = num_of_times
    x.times do
      print info.gsub(/[\w!?\.\'\(\)˚\-｡ｰ\;\/\"\:<>+,★·.·´¯`░]/, " ")
      sleep 0.18*x/4
      print (info.lines.length == 1 ? "\r" : "\r\e[#{info.lines.count-1}A")
      print info.yellow
      sleep 0.1
      print (info.lines.length == 1 ? "\r" : "\r\e[#{info.lines.count-1}A")
      x -= 0.2
    end
    puts info.yellow
  end
end

def finish_game
end


def display saved_games
	puts "---------------------------------------------"
  puts "   Game    |             Saved at"
  puts "---------------------------------------------"
	saved_games.each do |game|
		time = DateTime.parse("20"+game.to_i(36).to_s)
		saved_at = time.strftime('%a, %b %d, %Y => %I:%M:%S %p')
		puts "#{game.code} | #{saved_at}"
	end
  puts "---------------------------------------------"
end

    def load filename
      # move to data directory
      Dir.chdir(File.dirname(__FILE__))
      Dir.chdir('..')
      Dir.mkdir("data") unless Dir.exists?("data")
      Dir.chdir("data")
      filename = filename + ".csv"
      if filename != "file.csv" && File.exists?(filename)

	        # @loaded = true
	        # table_width = 15 + @num_of_chars + 2*@num_of_chars.to_s.length
	        # print "\r\e[#{guess_object.guess_num+3}A"
	        # print (" "*table_width + "\n")*(guess_object.guess_num+3)
	        # print "\r\e[#{guess_object.guess_num+3}A"
	        # saved_game = File.read(work_dir + "/" + filename + ".4dig")
	        # saved_game_arr = saved_game.split("\n")
	        # @chars_set = saved_game_arr[1]
	        # @secret_chars = saved_game_arr[4]
	        # secret_object.secret_chars = @secret_chars
	        # @num_of_chars = @secret_chars.length
	        # @hint_used = saved_game_arr[7].to_i
	        # @max_hint = (@chars_set.length/@num_of_chars).to_i
	        # @moves = saved_game_arr[10..-1]
	        # guess_object.guess_num = @moves.length
	        # chars_to_use
	        # table_header
	        # @moves = @moves.inject("") {|result, line| result + line + "\n"}
	        # puts @moves
	     #  else
	     #  	"No saved game with that name.".yellow.flash 1.5
	     #  end
      else
      	# list all saved game
        saved_games = Dir.glob("*.csv").map { |x| x.sub! '.csv', '' }
        if saved_games.count > 0
          display saved_games
        else
          puts "No saved game is found."
        end
      end
      # move back to parent directory
      Dir.chdir('..')
      exit
    end

# Save original terminal rows and columns size
term_cols = `tput cols`.chomp
term_rows = `tput lines`.chomp

# Specify new Hash to store the options
options = {}

# Create an option parser object to describe the type of options and their description
optparse = OptionParser.new do |opts|
  opts.banner = "Usage:\n\n" \
                + "  chadet " \
                + "[Options] Number... [Options] Characters... [Options]\n\n" \
                + "Description:\n\n" \
                + "  Characters Detective.\n" \
                + "  A game of guessing random characters intelligently. The default number\n" \
                + "  of characters to guess is 4 and the default set of characters to guess\n" \
                + "  with is decimal digits from  0 to 9. After each guess you make, computer\n" \
                + "  will tell you how many characters you guessed correctly and how many\n" \
                + "  characters that their positions you guessed correctly. Next, you can\n" \
                + "  guess intelligently based on the previous answers.\n\n" \
                + "Options:\n\n"

   opts.on '-r', '--rules', 'How to play this game' do
   		Dir.chdir(File.dirname(__FILE__))
   		Dir.chdir("../lib")
      system("printf '\\033[8;#{term_rows};65t'")
      system('less -F -R Rules_Of_The_Game_▼_')
      system("printf '\\033[8;#{term_rows};#{term_cols}t'")
      exit
   end

   options[:num_of_chars] = 4
   opts.on '-n', '--number NUMBER', Integer, 'How many characters you want to play' do |num|
      options[:num_of_chars] = num
   end

   options[:characters] = "0123456789"
   opts.on '-c', '--characters CHARS SET', 'Set of characters you want to play' do |chars|
      options[:characters] = chars
   end
   
   options[:test] = false
   opts.on '-t', '--test [TEST MODE]', 'Display the characters to guess' do
      options[:test] = true
   end  

   options[:load] = "file"
   opts.on '-l', '--load [SAVED GAME]', String, 'Load saved game' do |game|
   		options[:load] = game unless game.nil?
      load options[:load]
      exit
   end

   opts.on '-h', '--help', 'Display this message' do
      puts opts
      puts ""
      exit
   end

   opts.on '-v', '--version', 'Display the version and author of this game' do
      version = ("Chadet " + Chadet::VERSION).code
      puts version

      print "Show license? (y/n): "
      show_license = gets.chomp
      print "\r\e[1A                         \r"

      if show_license == "y"
        Dir.chdir(File.dirname(__FILE__))
        Dir.chdir("..")
        system('less LICENSE.txt')
      end
      exit
   end
end

# Run parse! on the parser object
optparse.parse!

# Set of characters to play with
chars_set = options[:characters]
if chars_set.length < 2
   print "Chadet: ".green
   puts "Cannot play with less than 2 characters to guess with.".red
   exit
end

# Set number of characters based on option -d given or the default number of 4
num_of_chars = options[:num_of_chars]
if num_of_chars > chars_set.length
   num_of_chars = chars_set.length
elsif num_of_chars < 1
   print "Chadet: ".green
   puts "Cannot play with less than 1 character to guess.".red
   exit
end

secret_obj = Chadet::SecretCharacters.new(chars_set, num_of_chars)
chars_to_guess = secret_obj.secret_chars
num_of_chars = secret_obj.num_of_chars

# Set the number to guess
# system('clear')
system("tput smcup")
system("printf '\\033[8;#{term_rows};65t'")
# system("printf '\e[33m\e[44m\e[2J\e[1;1H'")

print "\r\e[1A"
puts "The secret characters are: #{chars_to_guess}".blue  if options[:test] == true
play = Chadet::Play.new(secret_obj)
play.header
play.chars_to_use
play.table_header

go = Chadet::Guess.new(chars_set)


# list of commands
save_commands = %w{save svae saev sav sev}
exit_commands = %w{quit exit solve solv}
cheat_commands = %w{hint hit cheat clue bonus}

# Play the game until cc. & cp. = num_of_chars
begin
  print "Guess: ".green 
  go.guess = gets.chomp
  print "\r\e[1A" + " "*(go.guess.length + 7)
  print "\r"
  # Check for exit commands
  if save_commands.include? go.guess.downcase
    go.guess_num = play.do_save go.guess_num
    break if go.guess_num < 0
  elsif exit_commands.include? go.guess.downcase
    go.guess_num = play.do_quit go.guess_num
    break if go.guess_num < 0
  elsif cheat_commands.include? go.guess.downcase
    play.do_hint
  elsif go.guess.length < num_of_chars
    "Not enough input characters!".red.flash 1
  elsif go.wrong_input?
    "Wrong input character!".red.flash 1
  elsif go.is_redundant?
    go.handle_redundancy
  elsif go.guess.length > num_of_chars
    ("I'll take the first#{num_of_chars == 1 ? '' : ' ' + num_of_chars.to_s} "\
    + "character#{num_of_chars == 1 ? '' : 's'}.").green.flash 1.5
    go.guess = go.guess[0...num_of_chars]
    go.guess_num += 1
    puts play.answer go.guess, go.guess_num
  else
    go.guess = go.guess[0...num_of_chars]
    go.guess_num += 1
    puts play.answer go.guess, go.guess_num
  end
end until go.guess == secret_obj.secret_chars

play.end_game if go.guess_num > 0

# Hide xterm cursor
system("tput civis -- invisible")

play.result go.guess_num
play.footer

# Catch any key being typed
system("stty raw -echo") #=> Raw mode, no echo
char = STDIN.getc
system("stty -raw echo") #=> Reset terminal mode

# Show xterm cursor as normal
system("tput cnorm -- normal")

# End alternate screen
system("tput rmcup")

# Resize terminal window back to before the game was started
system("printf '\\033[8;#{term_rows};#{term_cols}t'")